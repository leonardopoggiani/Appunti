---
swagger: "2.0"
info:
  description: "My REST API"
  version: "1.0.0"
  title: "My REST API"
host: "172.16.0.253:8080"
basePath: "/v2"
tags:
- name: "employees"
  description: "Employee collection"
schemes:
- "http"
paths:
  /employees:
    post:
      tags:
      - "employees"
      summary: "Add a new employee"
      description: ""
      operationId: "add_employee"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Employee data"
        required: true
        schema:
          $ref: "#/definitions/Employee"
      responses:
        "405":
          description: "Invalid input"
      x-swagger-router-controller: "swagger_server.controllers.employees_controller"
    put:
      tags:
      - "employees"
      summary: "Update an existing employee"
      description: ""
      operationId: "update_employee"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Employee object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Employee"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Employee not found"
        "405":
          description: "Validation exception"
      x-swagger-router-controller: "swagger_server.controllers.employees_controller"
  /employees/{employeeId}:
    get:
      tags:
      - "employees"
      summary: "Find employee by ID"
      description: "Returns a single employee"
      operationId: "get_employee_by_id"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "employeeId"
        in: "path"
        description: "ID of Employee to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Employee"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Employee not found"
      x-swagger-router-controller: "swagger_server.controllers.employees_controller"
    post:
      tags:
      - "employees"
      summary: "Updates an employee in the store with form data"
      description: ""
      operationId: "update_employee_with_form"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "employeeId"
        in: "path"
        description: "ID of employe that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the employee"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the employee"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      x-swagger-router-controller: "swagger_server.controllers.employees_controller"
    delete:
      tags:
      - "employees"
      summary: "Deletes an employee"
      description: ""
      operationId: "delete_employee"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "employeeId"
        in: "path"
        description: "Employee id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Employee not found"
      x-swagger-router-controller: "swagger_server.controllers.employees_controller"
definitions:
  Employee:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Jim"
      photoUrls:
        type: "string"
        example: "http://mywebsite.org/mypic.jpg"
    xml:
      name: "Employee"
    example:
      photoUrls: "http://mywebsite.org/mypic.jpg"
      name: "Jim"
      id: 0
